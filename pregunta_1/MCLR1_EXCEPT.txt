Grammar: 
    S -> I                                
    I -> try I catch I finally I 
      |  try I catch I          
      |  I ; I                      
      |  instr                     

Graph:
    from to, transition
    0 1, I
    0 2, try
    0 3, instr
    1 4, ;
    1 38, $
    2 5, I
    2 6, try
    2 7, instr 
    4 8, I
    4 2, try
    4 3, instr
    5 9, catch
    5 10, ;
    6 11, I
    6 6, try
    6 7, instr
    8 4, ;
    9 12, I
    9 13, try
    9 14, instr
    10 15, I
    10 6, try
    10 7, instr
    11 16, catch
    11 10, ;
    12 17, finally
    12 18, ;
    13 19, I
    13 6, try
    13 7, instr
    15 10, ;
    16 20, I
    16 21, try
    16 22, instr
    17 23, I
    17 2, try
    17 3, instr
    18 24, I
    18 13, try
    18 14, instr
    19 25, catch
    19 10, ;
    20 26, finally
    20 27, ;
    21 28, I
    21 6, try
    21 7, ;
    23 4, ;
    24 18, ;
    25 29, I
    25 13, try
    25 14, instr
    26 30, I
    26 6, try
    26 7, instr
    27 31, I
    27 21, try
    27 22, instr
    28 32, catch
    28 10, ;
    29 33, finally
    29 18, ;
    30 10, ;
    31 27, ;
    32 34, I
    32 21, try
    32 22, instr
    33 35, I
    33 13, try
    33 14, instr
    34 36, finally
    34 27, ;
    35 18, ;
    36 37, I
    36 21, try
    36 22, instr
    37 27, ;




State 0: 
    [S -> . I $                     , $ ]  
    [I -> . try I catch I finally I , $, ; ] 
    [I -> . try I catch I           , $, ; ]
    [I -> . I ; I                   , $, ; ]  
    [I -> . instr                   , $, ; ] 

State 1:
    [ S -> I . $                    , $ ]                   shift-reduce                 
    [ I -> I . ; I                  , $, ; ] 

State 2: 
    [I -> try . I catch I finally I , $, ; ]  
    [I -> try . I catch I           , $, ; ]
    [I -> . try I catch I finally I , catch, ; ]  
    [I -> . try I catch I           , catch, ; ] 
    [I -> . I ; I                   , catch, ; ] 
    [I -> . instr                   , catch, ; ] 

State 3:
    [I -> instr .                   , $, ; ]                                          

State 4: 
    [I -> I ; . I                   , $, ; ]                   
    [I -> . try I catch I finally I , $, ; ]  
    [I -> . try I catch I           , $, ; ]  
    [I -> . I ; I                   , $, ; ]  
    [I -> . instr                   , $, ; ]  

State 5: 
    [I -> try I . catch I finally I , $, ; ] 
    [I -> try I . catch I           , $, ; ]
    [I -> I . ; I                   , catch, ; ] 

State 6:
    [I -> try . I catch I finally I , catch, ; ] 
    [I -> try . I catch I           , catch, ; ]
    [I -> . try I catch I finally I , catch, ; ]  
    [I -> . try I catch I           , catch, ; ]  
    [I -> . I ; I                   , catch, ; ] 
    [I -> . instr                   , catch, ; ] 

State 7:
    [I -> instr .                   , catch, ; ]                                          

State 8:
    [ I -> I ; I .                  , $, ; ]                shift-reduce 
    [ I ->  I . ; I                 , $, ; ]        

State 9: 
    [I -> try I catch . I finally I , $, ; ]   
    [I -> try I catch . I           , $, ; ]
    [I -> . try I catch I finally I , finally, $, ; ] 
    [I -> . try I catch I           , finally, $, ; ] 
    [I -> . I ; I                   , finally, $, ; ] 
    [I -> . instr                   , finally, $, ; ] 

State 10:
    [ I -> I ; . I                  , catch, ; ] 
    [I -> . try I catch I finally I , catch, ; ] 
    [I -> . try I catch I           , catch, ; ] 
    [I -> . I ; I                   , catch, ; ] 
    [I -> . instr                   , catch, ; ]

State 11:
    [I -> try I . catch I finally I , catch, ; ] 
    [I -> try I . catch I           , catch, ; ]
    [I -> I . ; I                   , catch, ; ] 

State 12:
    [I -> try I catch I . finally I , $, ; ] 
    [I -> try I catch I .           , $, ; ]                   shift-reduce                        
    [I -> I . ; I                   , finally, $, ; ] 

State 13: 
    [I -> try . I catch I finally I , finally, $, ; ] 
    [I -> try . I catch I           , finally, $, ; ]
    [I -> . try I catch I finally I , catch, ; ]  
    [I -> . try I catch I           , catch, ; ]  
    [I -> . I ; I                   , catch, ; ] 
    [I -> . instr                   , catch, ; ] 

State 14:
    [I -> instr .                   , finally, $, ; ]                                         

State 15:
    [ I -> I ; I .                  , catch, ; ]                shift-reduce                            
    [I ->  I . ; I                  , catch, ; ] 

State 16:
    [I -> try I catch . I finally I , catch, ; ] 
    [I -> try I catch . I           , catch, ; ]
    [I -> . try I catch I finally I , finally, catch, ; ] 
    [I -> . try I catch I           , finally, catch, ; ] 
    [I -> . I ; I                   , finally, catch, ; ] 
    [I -> . instr                   , finally, catch, ; ]

State 17:
    [I -> try I catch I finally . I , $, ; ]
    [I -> . try I catch I finally I , $, ; ] 
    [I -> . try I catch I           , $, ; ] 
    [I -> . I ; I                   , $, ; ] 
    [I -> . instr                   , $, ; ]


State 18:
    [I -> I ; . I                   , finally, $, ; ] 
    [I -> . try I catch I finally I , finally, $, ; ] 
    [I -> . try I catch I           , finally, $, ; ] 
    [I -> . I ; I                   , finally, $, ; ] 
    [I -> . instr                   , finally, $, ; ] 

State 19: 
    [I -> try I . catch I finally I , finally, $, l ] 
    [I -> try I . catch I           , finally, $, l ]
    [I -> I . ; I                   , finally, $, l ] 

State 20:
    [I -> try I catch I . finally I , catch, ; ] 
    [I -> try I catch I .           , catch, ; ]                   shift-reduce                       
    [I -> I . ; I                   , finally, catch, ; ] 

State 21:
    [I -> try . I catch I finally I , finally, catch, ; ] 
    [I -> try . I catch I           , finally ]
    [I -> . try I catch I finally I , finally, catch, ; ]  
    [I -> . try I catch I           , finally, catch, ; ]  
    [I -> . I ; I                   , finally, catch, ; ] 
    [I -> . instr                   , finally, catch, ; ] 

State 22:
    [I -> instr .                   , finally, catch, ; ]                                          

State 23:
    [I -> try I catch I finally I . , $, ; ]                     shift-reduce
    [I -> I . ; I                   , $, ; ] 

State 24:
    [I -> I ; I .                   , finally, $, ; ]             shift-reduce                         
    [I -> I . ; I                   , finally, $, ; ] 

State 25: 
    [I -> try I catch . I finally I , finally, $, ; ] 
    [I -> try I catch . I           , finally, $, ; ]
    [I -> . try I catch I finally I , finally, $, ; ] 
    [I -> . try I catch I           , finally, $, ; ] 
    [I -> . I ; I                   , finally, $, ; ] 
    [I -> . instr                   , finally, $, ; ] 

State 26
    [I -> try I catch I finally . I , catch, ; ] 
    [I -> . try I catch I finally I , catch, ; ] 
    [I -> . try I catch I           , catch, ; ] 
    [I -> . I ; I                   , catch, ; ] 
    [I -> . instr                   , catch, ; ] 

State 27:
    [I -> I ; . I                   , finally, catch, ; ] 
    [I -> . try I catch I finally I , finally, catch, ; ] 
    [I -> . try I catch I           , finally, catch, ; ] 
    [I -> . I ; I                   , finally, catch, ; ] 
    [I -> . instr                   , finally, catch, ; ]

State 28:
    [I -> try I . catch I finally I , finally, catch. ; ] 
    [I -> try I . catch I           , finally ]
    [I -> I . ; I                   , finally, catch. ; ] 

State 29: 7
    [I -> try I catch I . finally I , finally, $, ; ] 
    [I -> try I catch I .           , finally, $, ; ]               shift-reduce                         
    [I -> I . ; I                   , finally, $, ; ] 

State 30
    [I -> try I catch I finally I . , catch, ; ]                    shift-reduce
    [I -> I . ; I                   , catch, ; ] 

State 31:
    [I -> I ; I .                   , finally, catch, ; ]           shift-reduce                         
    [I -> I . ; I                   , finally, catch, ; ] 

State 32:
    [I -> try I catch . I finally I , finally, catch, ; ] 
    [I -> try I catch . I           , finally, catch, ; ]
    [I -> . try I catch I finally I , finally, catch, ; ] 
    [I -> . try I catch I           , finally, catch, ; ] 
    [I -> . I ; I                   , finally, catch, ; ] 
    [I -> . instr                   , finally, catch, ; ]


State 33:
    [I -> try I catch I finally . I , finally, $, ; ] 
    [I -> . try I catch I finally I , finally, $, ; ] 
    [I -> . try I catch I           , finally, $, ; ] 
    [I -> . I ; I                   , finally, $, ; ] 
    [I -> . instr                   , finally, $, ; ] 

State 34:
    [I -> try I catch I . finally I , finally, catch, ; ]
    [I -> try I catch I .           , finally, catch, ; ]           shift-reduce                         
    [I -> I . ; I                   , finally, catch, ; ] 

State 35:
    [I -> try I catch I finally I . , finally, $, ; ]               shift-reduce                
    [I -> I . ; I                   , finally, $, ; ] 

State 36:
    [I -> try I catch I finally . I , finally, catch, ; ] 
    [I -> . try I catch I finally I , finally, catch, ; ] 
    [I -> . try I catch I           , finally, catch, ; ] 
    [I -> . I ; I                   , finally, catch, ; ] 
    [I -> . instr                   , finally, catch, ; ] 
    
State 37:
    [I -> try I catch I finally I . , finally, catch, ; ]           shift-reduce            
    [I -> I . ; I                   , finally, catch, ; ] 

State 38:
    [ S -> I $ .                    , $ ]                

----------------------------------------------------------------------------
----------------------------------------------------------------------------

1.b) Como forzar que se cumplan las reglas de precedencia dadas:

Para los estados:

    State 8:
        [ I -> I ; I .                  , $, ; ]                        shift-reduce 
        [ I ->  I . ; I                 , $, ; ]        


    State 24:
        [I -> I ; I .                   , finally, $, ; ]               shift-reduce                         
        [I -> I . ; I                   , finally, $, ; ] 

    State 31:
        [I -> I ; I .                   , finally, catch, ; ]           shift-reduce                         
        [I -> I . ; I                   , finally, catch, ; ] 

    State 15:
        [ I -> I ; I .                  , catch, ; ]                    shift-reduce                            
        [ I ->  I . ; I                  , catch, ; ] 

    reducimos, para asegurar la asociatividad izq:
        . instr ; instr ; instr  < shift
        instr . ; instr ; instr  < reduce I0=instr
        . I0 ; instr ; instr     < shift
        I0 . ; instr ; instr     < shift
        I0 ; . instr ; instr     < shift
        I0 ; instr . ; instr     < reduce I1=instr
        I0 ; . I1     ; instr    < shift 
        I0 ; I1 .     ; instr    < reduce I2= (I0 ; I1)
        . I2 ; instr             < shift
        I2 . ; instr             < shift
        I2 ; . instr             < shift
        I2 ; instr .             < shift
        I2 ; instr .             < reduce I3 = instr
        I2 ; . I3                < shift
        I2 ; I3 .                < reduce I4 = (I2;I3)
        . I4                     < shift
        I4 .                     < reduce S = I4
        S
        finalmente:
        S = I4 = (I2;I3) = ((I0;I1);instr) = ((instr;instr);instr) < asociativo izq

Para el estado:

    State 1:
        [ S -> I .                      , $ ]                   shift-reduce                 
        [ I -> I . ; I                  , $, ; ] 

        hacemos shift

Para los estados:

    State 23:
        [I -> try I catch I finally I . , $, ; ]                     shift-reduce
        [I -> I . ; I                   , $, ; ] 

    State 30
        [I -> try I catch I finally I . , catch, ; ]                    shift-reduce
        [I -> I . ; I                   , catch, ; ] 

    State 35:
        [I -> try I catch I finally I . , finally, $, ; ]               shift-reduce                
        [I -> I . ; I                   , finally, $, ; ] 

    State 37:
        [I -> try I catch I finally I . , finally, catch, ; ]           shift-reduce            
        [I -> I . ; I                   , finally, catch, ; ] 

        Escogemos hacer reduce para hacer cumplir que finally tenga más precedencia que ;
        Ejemplo:
        . I0 ; try I1 catch I2 finally I3 ; I4 < shift
        I0 . ; try I1 catch I2 finally I3 ; I4 < shift
        I0 ; . try I1 catch I2 finally I3 ; I4 < shift
        I0 ; try . I1 catch I2 finally I3 ; I4 < shift
        I0 ; try I1 . catch I2 finally I3 ; I4 < shift
        I0 ; try I1 catch . I2 finally I3 ; I4 < shift
        I0 ; try I1 catch I2 . finally I3 ; I4 < shift 
        I0 ; try I1 catch I2 finally . I3 ; I4 < shift 
        I0 ; try I1 catch I2 finally I3 . ; I4 < (shift-reduce, escogemos reduce) I5=try I1 catch I2 finally I3
        I0 ; . I5 ; I4                         < shift
        I0 ; I5 . ; I4                         < reduce I6=(I0;I5)
        . I6 ; I4                              < shift
        I6 . ; I4                              < shift
        I6 ; . I4                              < shift
        I6 ; I4 .                              < reduce I7=(I6;I4)
        I7                                     < reduce S=I7
        S
        S = I7 = (I6;I4) = ((I0;(try I1 catch I2 finally I3)); I4)

Para los estados:
    State 12:
        [I -> try I catch I . finally I , $, ; ] 
        [I -> try I catch I .           , $, ; ]                        shift-reduce                        
        [I -> I . ; I                   , finally, $, ; ] 


    State 20:
        [I -> try I catch I . finally I , catch, ; ] 
        [I -> try I catch I .           , catch, ; ]                    shift-reduce                       
        [I -> I . ; I                   , finally, catch, ; ] 

    State 29:
        [I -> try I catch I . finally I , finally, $, ; ] 
        [I -> try I catch I .           , finally, $, ; ]               shift-reduce                         
        [I -> I . ; I                   , finally, $, ; ] 


    State 34:
        [I -> try I catch I . finally I , finally, catch, ; ]
        [I -> try I catch I .           , finally, catch, ; ]           shift-reduce                         
        [I -> I . ; I                   , finally, catch, ; ] 

    Escogemos hacer shift para cumplir que catch tenga menor precedencia que el ;
    Ejemplo:
        . try instr catch instr ; instr < shift
        try . instr catch instr ; instr < shift
        try instr . catch instr ; instr < reduce I0=instr
        try . I0 catch instr ; instr    < shift 
        try I0 . catch instr ; instr    < shift 
        try I0 catch . instr ; instr    < shift 
        try I0 catch instr . ; instr    < reduce I1=instr 
        try I0 catch . I1  ; instr      < shift
        try I0 catch I1 .  ; instr      < shift
        try I0 catch I1  ; . instr      < shift
        try I0 catch I1  ; instr .      < reduce I2=instr
        try I0 catch I1  ; . I2         < shift
        try I0 catch I1  ; I2 .         < (hay shift reduce, pero anteriormente dijimos que haremos reduce) reduce I3=(I1:I2)                     
        try I0 catch . I3               < shift
        try I0 catch I3 .               < reduce I4 = try I0 catch I3
        I4                              < reduce S = I4
        S

    S = I4 = try I0 catch I3 = try instr catch (I1; I2) = try instr catch (instr; instr)

try I catch try I catch I f inally I = try I catch (try I catch I finally I)

. try I catch try I catch I finally I < shift
try I . catch try I catch I finally I < shift
try I catch . try I catch I finally I < shift
try I catch try . I catch I finally I < shift
try I catch try I . catch I finally I < shift
try I catch try I catch . I finally I < shift
try I catch try I catch I . finally I < (shift/reduce, pero decidimos hacer shift como antes)
try I catch try I catch I finally . I < shift
try I catch try I catch I finally I . < (shift/reduce, pero decidimos hacer reduce como mencionamos antes) I1=(try I catch I finally I)
try I catch I1 .                      < reduce I2=(try I catch I1)
I2                                    < reduce S=I2
S

S = I2 = (try I catch I1) = (try I catch (try I catch I finally I))